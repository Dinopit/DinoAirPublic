version: '3.8'

services:
  # DinoAir Web GUI Service
  web-gui:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        NODE_ENV: ${NODE_ENV:-production}
    image: dinoair-web-gui:latest
    container_name: dinoair-web-gui
    ports:
      - "${PORT:-3000}:3000"
    environment:
      # Node environment
      - NODE_ENV=${NODE_ENV:-production}
      
      # API Configuration
      - API_BASE_URL=${API_BASE_URL:-http://comfyui:8188}
      - API_KEY=${API_KEY:-dinoair-free-tier-api-key}
      - API_SECRET=${API_SECRET}
      
      # Session and Security
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      
      # CORS
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      
      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-60000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # ComfyUI Backend
      - COMFYUI_API_URL=${COMFYUI_API_URL:-http://comfyui:8188}
      - COMFYUI_WORKFLOW_PATH=${COMFYUI_WORKFLOW_PATH:-./FreeTierPacked/sd15-workflow.json}
      
      # Client Configuration
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-DinoAir Free Tier}
      - NEXT_PUBLIC_VERSION=${NEXT_PUBLIC_VERSION:-1.0.0}
      - NEXT_PUBLIC_IS_FREE_TIER=${NEXT_PUBLIC_IS_FREE_TIER:-true}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3000/api}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8080}
    volumes:
      - ./uploads:/app/uploads
      - ./FreeTierPacked:/app/FreeTierPacked:ro
    networks:
      - dinoair-network
    depends_on:
      - comfyui
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # ComfyUI Service (backend)
  comfyui:
    image: python:3.11-slim
    container_name: dinoair-comfyui
    working_dir: /app
    ports:
      - "8188:8188"
    volumes:
      - ../:/app
      - ./models:/app/models
      - ./output:/app/output
      - ./input:/app/input
      - ./custom_nodes:/app/custom_nodes
    environment:
      - PYTHONPATH=/app
    command: python main.py --listen 0.0.0.0 --port 8188
    networks:
      - dinoair-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8188/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development database (optional, for future use)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: dinoair-db
  #   environment:
  #     - POSTGRES_USER=${DB_USER:-dinoair}
  #     - POSTGRES_PASSWORD=${DB_PASSWORD:-dinoair}
  #     - POSTGRES_DB=${DB_NAME:-dinoair}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - dinoair-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dinoair}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Redis cache (optional, for future use)
  # redis:
  #   image: redis:7-alpine
  #   container_name: dinoair-cache
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   command: redis-server --appendonly yes
  #   networks:
  #     - dinoair-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

networks:
  dinoair-network:
    driver: bridge

volumes:
  # postgres-data:
  # redis-data:
  uploads: