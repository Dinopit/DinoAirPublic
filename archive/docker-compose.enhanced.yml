version: '3.8'

services:
  dinoair:
    build: 
      context: .
      dockerfile: Dockerfile.enhanced
    container_name: dinoair-enhanced
    ports:
      - "3000:3000"
      - "8188:8188"
      - "11434:11434"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./config:/app/config
      - dinoair-cache:/app/.cache
    environment:
      - NODE_ENV=production
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
      - DEBUG=false
    restart: unless-stopped
    networks:
      - dinoair-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:3000/api/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: dinoair-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - dinoair-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: dinoair-postgres
    environment:
      - POSTGRES_DB=dinoair
      - POSTGRES_USER=dinoair
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_change_me}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres:/docker-entrypoint-initdb.d
    networks:
      - dinoair-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dinoair -d dinoair"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: dinoair-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - dinoair
    networks:
      - dinoair-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: dinoair-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dinoair-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: dinoair-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - dinoair-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  dinoair-cache:
    driver: local
  nginx-cache:
    driver: local

networks:
  dinoair-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16