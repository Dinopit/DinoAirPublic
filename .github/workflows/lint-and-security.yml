name: Code Quality and Security Checks

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  python-lint:
    name: Python Linting and Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
          
      - name: Run Black (formatting check)
        run: black --check --diff .
        
      - name: Run isort (import sorting check)
        run: isort --check-only --diff .
        
      - name: Run Flake8 (linting)
        run: flake8 . --max-line-length=88 --extend-ignore=E203,W503 --exclude=node_modules,ComfyUI/models,web-gui/node_modules,web-gui-node/node_modules
        
      - name: Run MyPy (type checking)
        run: mypy . --ignore-missing-imports --exclude=node_modules --exclude=ComfyUI/models --exclude=web-gui --exclude=web-gui-node
        continue-on-error: true
        
      - name: Run Bandit (security scanning)
        run: bandit -r . -f json -o bandit-report.json --exclude=./node_modules,./ComfyUI/models,./web-gui/node_modules,./web-gui-node/node_modules,./tests
        continue-on-error: true
        
      - name: Run Safety (dependency vulnerability check)
        run: safety check --json --output safety-report.json
        continue-on-error: true

  javascript-lint:
    name: JavaScript/TypeScript Linting and Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ['web-gui', 'web-gui-node', 'installer']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.directory }}/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd ${{ matrix.directory }}
          npm ci
          
      - name: Run ESLint
        run: |
          cd ${{ matrix.directory }}
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-report.json
        continue-on-error: true
        
      - name: Run Prettier check
        run: |
          cd ${{ matrix.directory }}
          npx prettier --check . || true
          
      - name: Run npm audit
        run: |
          cd ${{ matrix.directory }}
          npm audit --audit-level=moderate --json > npm-audit-report.json || true

  pre-commit-check:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install pre-commit
        run: pip install pre-commit
        
      - name: Run pre-commit hooks
        run: pre-commit run --all-files --verbose

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Node.js for secrets management
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies for secrets validation
        run: |
          cd web-gui-node
          npm ci
          
      - name: Run DinoAir Secrets Validation
        run: |
          node scripts/secrets-cli.js validate --strict --json > secrets-validation.json || true
          echo "Secrets validation completed"
          
      - name: Run DinoAir Security Audit
        run: |
          node scripts/secrets-cli.js audit --detailed --save || true
          echo "Security audit completed"
          
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/python
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            secrets-validation.json
            security-audit-*.json
          retention-days: 30

  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [python-lint, javascript-lint, pre-commit-check, security-scan]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "Python lint: ${{ needs.python-lint.result }}"
          echo "JavaScript lint: ${{ needs.javascript-lint.result }}"
          echo "Pre-commit: ${{ needs.pre-commit-check.result }}"
          echo "Security scan: ${{ needs.security-scan.result }}"
          
          if [[ "${{ needs.python-lint.result }}" == "failure" || "${{ needs.javascript-lint.result }}" == "failure" || "${{ needs.pre-commit-check.result }}" == "failure" ]]; then
            echo "❌ Quality gate failed - critical linting issues found"
            exit 1
          else
            echo "✅ Quality gate passed"
          fi