name: Load Testing

on:
  schedule:
    # Run load tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of load test to run'
        required: true
        default: 'quick'
        type: choice
        options:
        - quick
        - full
        - chat-only
        - health-only
        - artifacts-only
      duration:
        description: 'Test duration in minutes'
        required: false
        default: '5'
        type: string

env:
  NODE_VERSION: '20'

jobs:
  load-test:
    name: Run Load Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-gui-node/package-lock.json

      - name: Install dependencies
        working-directory: ./web-gui-node
        run: npm ci

      - name: Start test server
        working-directory: ./web-gui-node
        run: |
          # Start server in background for load testing
          npm start &
          echo $! > server.pid
          
          # Wait for server to be ready
          timeout 30 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 1; done'

      - name: Run quick load test
        if: github.event.inputs.test_type == 'quick' || github.event.inputs.test_type == ''
        working-directory: ./web-gui-node
        run: |
          npm run load-test:quick
          
          # Check for performance thresholds
          if [ -f artillery-report.json ]; then
            node -e "
              const report = require('./artillery-report.json');
              const avgResponseTime = report.aggregate.summaries['http.response_time']?.mean || 0;
              const p95ResponseTime = report.aggregate.summaries['http.response_time']?.p95 || 0;
              const errorRate = (report.aggregate.counters['http.codes.5xx'] || 0) / (report.aggregate.counters['http.requests'] || 1);
              
              console.log('Performance Metrics:');
              console.log('Average Response Time:', avgResponseTime + 'ms');
              console.log('95th Percentile:', p95ResponseTime + 'ms');
              console.log('Error Rate:', (errorRate * 100).toFixed(2) + '%');
              
              if (avgResponseTime > 5000) {
                console.error('❌ FAIL: Average response time exceeds 5s threshold');
                process.exit(1);
              }
              if (p95ResponseTime > 10000) {
                console.error('❌ FAIL: 95th percentile exceeds 10s threshold');
                process.exit(1);
              }
              if (errorRate > 0.05) {
                console.error('❌ FAIL: Error rate exceeds 5% threshold');
                process.exit(1);
              }
              console.log('✅ All performance thresholds passed');
            "
          fi

      - name: Run full load test
        if: github.event.inputs.test_type == 'full'
        working-directory: ./web-gui-node
        run: |
          npm run load-test
          
          # Enhanced performance analysis for full tests
          if [ -f artillery-report.json ]; then
            node -e "
              const report = require('./artillery-report.json');
              const avgResponseTime = report.aggregate.summaries['http.response_time']?.mean || 0;
              const p95ResponseTime = report.aggregate.summaries['http.response_time']?.p95 || 0;
              const p99ResponseTime = report.aggregate.summaries['http.response_time']?.p99 || 0;
              const errorRate = (report.aggregate.counters['http.codes.5xx'] || 0) / (report.aggregate.counters['http.requests'] || 1);
              const requestRate = report.aggregate.rates['http.request_rate'] || 0;
              
              console.log('Full Load Test Performance Metrics:');
              console.log('Average Response Time:', avgResponseTime + 'ms');
              console.log('95th Percentile:', p95ResponseTime + 'ms');
              console.log('99th Percentile:', p99ResponseTime + 'ms');
              console.log('Request Rate:', requestRate + ' req/s');
              console.log('Error Rate:', (errorRate * 100).toFixed(2) + '%');
              
              // Stricter thresholds for full load tests
              if (avgResponseTime > 3000) {
                console.error('❌ FAIL: Average response time exceeds 3s threshold for full load');
                process.exit(1);
              }
              if (p95ResponseTime > 8000) {
                console.error('❌ FAIL: 95th percentile exceeds 8s threshold for full load');
                process.exit(1);
              }
              if (errorRate > 0.02) {
                console.error('❌ FAIL: Error rate exceeds 2% threshold for full load');
                process.exit(1);
              }
              console.log('✅ All full load test thresholds passed');
            "
          fi

      - name: Run chat API load test
        if: github.event.inputs.test_type == 'chat-only'
        working-directory: ./web-gui-node
        run: npm run load-test:chat

      - name: Run health API load test
        if: github.event.inputs.test_type == 'health-only'
        working-directory: ./web-gui-node
        run: npm run load-test:health

      - name: Run artifacts API load test
        if: github.event.inputs.test_type == 'artifacts-only'
        working-directory: ./web-gui-node
        run: npm run load-test:artifacts

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results-${{ github.run_id }}
          path: |
            web-gui-node/load-tests/reports/
            web-gui-node/artillery-report.json
          retention-days: 30

      - name: Stop test server
        if: always()
        working-directory: ./web-gui-node
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './web-gui-node/artillery-report.json';
            
            if (fs.existsSync(path)) {
              const report = JSON.parse(fs.readFileSync(path, 'utf8'));
              const summary = `
              ## 📊 Load Test Results
              
              - **Total Requests**: ${report.aggregate.counters['http.requests'] || 'N/A'}
              - **Success Rate**: ${report.aggregate.rates['http.request_rate'] || 'N/A'}/s
              - **Average Response Time**: ${report.aggregate.summaries['http.response_time']?.mean || 'N/A'}ms
              - **95th Percentile**: ${report.aggregate.summaries['http.response_time']?.p95 || 'N/A'}ms
              
              Full results are available in the workflow artifacts.
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  performance-monitoring:
    name: Verify Performance Monitoring
    runs-on: ubuntu-latest
    needs: load-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-gui-node/package-lock.json

      - name: Install dependencies
        working-directory: ./web-gui-node
        run: npm ci

      - name: Start server with APM
        working-directory: ./web-gui-node
        env:
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:4318"
          OTEL_SERVICE_NAME: "dinoair-load-test"
        run: |
          npm start &
          echo $! > server.pid
          timeout 30 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 1; done'

      - name: Test APM endpoints
        working-directory: ./web-gui-node
        run: |
          echo "Testing APM endpoints..."
          
          # Test performance metrics endpoint
          curl -f http://localhost:3000/api/performance || echo "Performance endpoint not available"
          
          # Test health endpoint with performance data
          curl -f http://localhost:3000/api/health | jq '.performance' || echo "Performance data not in health endpoint"
          
          echo "APM endpoint testing completed"

      - name: Stop server
        if: always()
        working-directory: ./web-gui-node
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
