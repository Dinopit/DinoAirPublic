name: Enhanced Accessibility Testing

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run accessibility tests daily at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Accessibility test scope'
        required: false
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - comprehensive
      compliance_level:
        description: 'WCAG compliance level to test'
        required: false
        default: 'AA'
        type: choice
        options:
          - A
          - AA
          - AAA

permissions:
  contents: read
  actions: write
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  TEST_SCOPE: ${{ github.event.inputs.test_scope || 'standard' }}
  COMPLIANCE_LEVEL: ${{ github.event.inputs.compliance_level || 'AA' }}

jobs:
  setup-accessibility-environment:
    name: Setup Accessibility Testing Environment
    runs-on: ubuntu-latest
    outputs:
      test-pages: ${{ steps.pages.outputs.pages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Define test pages based on scope
        id: pages
        run: |
          case "${{ env.TEST_SCOPE }}" in
            "minimal")
              pages='["/"]'
              ;;
            "standard")
              pages='["/", "/about", "/contact"]'
              ;;
            "comprehensive")
              pages='["/", "/about", "/contact", "/dashboard", "/settings", "/api/status"]'
              ;;
            *)
              pages='["/"]'
              ;;
          esac
          echo "pages=$pages" >> $GITHUB_OUTPUT

  playwright-accessibility-tests:
    name: Playwright Accessibility Tests
    runs-on: ubuntu-latest
    needs: setup-accessibility-environment
    strategy:
      matrix:
        page: ${{ fromJson(needs.setup-accessibility-environment.outputs.test-pages) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd web-gui && npm install || echo "::warning::Failed to install frontend dependencies"
          cd ../web-gui-node && npm install || echo "::warning::Failed to install backend dependencies"

      - name: Install Playwright and accessibility tools
        run: |
          cd web-gui
          npm install @playwright/test @axe-core/playwright axe-core || npm install
          npx playwright install --with-deps

      - name: Create accessibility test suite
        run: |
          mkdir -p web-gui/tests/accessibility
          cat > web-gui/tests/accessibility/enhanced-a11y.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');
          const AxeBuilder = require('@axe-core/playwright').default;

          const PAGE_PATH = process.env.PAGE_PATH || '/';
          const COMPLIANCE_LEVEL = process.env.COMPLIANCE_LEVEL || 'AA';

          test.describe(\`Accessibility tests for \${PAGE_PATH}\`, () => {
            test.beforeEach(async ({ page }) => {
              await page.goto(\`http://localhost:3000\${PAGE_PATH}\`);
            });

            test(\`should not have any automatically detectable WCAG \${COMPLIANCE_LEVEL} accessibility issues\`, async ({ page }) => {
              const accessibilityScanResults = await new AxeBuilder({ page })
                .withTags([\`wcag2\${COMPLIANCE_LEVEL.toLowerCase()}\`, 'wcag21aa'])
                .analyze();

              expect(accessibilityScanResults.violations).toEqual([]);
            });

            test('should have proper heading structure', async ({ page }) => {
              const headings = await page.$$eval('h1, h2, h3, h4, h5, h6', elements =>
                elements.map(el => ({ tag: el.tagName, text: el.textContent.trim() }))
              );
              
              // Should have at least one h1
              const h1Count = headings.filter(h => h.tag === 'H1').length;
              expect(h1Count).toBeGreaterThanOrEqual(1);
              expect(h1Count).toBeLessThanOrEqual(1); // Should have only one h1
            });

            test('should have alt text for all images', async ({ page }) => {
              const images = await page.$$eval('img', elements =>
                elements.map(img => ({
                  src: img.src,
                  alt: img.alt,
                  hasAlt: img.hasAttribute('alt')
                }))
              );

              for (const image of images) {
                expect(image.hasAlt).toBe(true);
                if (image.alt === '') {
                  // Decorative images should have empty alt text
                  console.log(\`Decorative image found: \${image.src}\`);
                }
              }
            });

            test('should have proper form labels', async ({ page }) => {
              const inputs = await page.$$eval('input, textarea, select', elements =>
                elements.map(input => ({
                  id: input.id,
                  type: input.type,
                  hasLabel: !!document.querySelector(\`label[for="\${input.id}"]\`) || input.hasAttribute('aria-label') || input.hasAttribute('aria-labelledby')
                }))
              );

              for (const input of inputs) {
                if (input.type !== 'hidden' && input.type !== 'submit' && input.type !== 'button') {
                  expect(input.hasLabel).toBe(true);
                }
              }
            });

            test('should have sufficient color contrast', async ({ page }) => {
              const contrastResults = await new AxeBuilder({ page })
                .withTags(['color-contrast'])
                .analyze();

              expect(contrastResults.violations).toEqual([]);
            });

            test('should be keyboard navigable', async ({ page }) => {
              // Test tab navigation
              await page.keyboard.press('Tab');
              const firstFocusable = await page.evaluate(() => document.activeElement.tagName);
              expect(['A', 'BUTTON', 'INPUT', 'SELECT', 'TEXTAREA']).toContain(firstFocusable);

              // Test escape key for modals/dropdowns
              await page.keyboard.press('Escape');
              // Should not throw an error
            });

            test('should have proper ARIA landmarks', async ({ page }) => {
              const landmarks = await page.$$eval('[role="main"], [role="navigation"], [role="banner"], [role="contentinfo"], main, nav, header, footer', elements =>
                elements.map(el => el.tagName + (el.getAttribute('role') ? \`[role="\${el.getAttribute('role')}"]\` : ''))
              );

              // Should have at least a main content area
              const hasMain = landmarks.some(landmark => 
                landmark.includes('MAIN') || landmark.includes('role="main"')
              );
              expect(hasMain).toBe(true);
            });
          });
          EOF

      - name: Start test server
        run: |
          cd web-gui-node
          npm start &
          echo $! > ../server.pid
          sleep 15

      - name: Run enhanced accessibility tests
        env:
          PAGE_PATH: ${{ matrix.page }}
          COMPLIANCE_LEVEL: ${{ env.COMPLIANCE_LEVEL }}
        run: |
          cd web-gui
          npx playwright test tests/accessibility/enhanced-a11y.spec.js --reporter=html --reporter=json || true

      - name: Generate accessibility report
        run: |
          echo "# Accessibility Test Report - ${{ matrix.page }}" > accessibility-report-${{ matrix.page }}.md
          echo "" >> accessibility-report-${{ matrix.page }}.md
          echo "## Test Configuration:" >> accessibility-report-${{ matrix.page }}.md
          echo "- Page: ${{ matrix.page }}" >> accessibility-report-${{ matrix.page }}.md
          echo "- WCAG Level: ${{ env.COMPLIANCE_LEVEL }}" >> accessibility-report-${{ matrix.page }}.md
          echo "- Test Scope: ${{ env.TEST_SCOPE }}" >> accessibility-report-${{ matrix.page }}.md
          echo "- Date: $(date)" >> accessibility-report-${{ matrix.page }}.md
          echo "" >> accessibility-report-${{ matrix.page }}.md

      - name: Stop test server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          pkill -f "npm start" || true
          pkill -f "node.*server" || true

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results-${{ matrix.page }}-${{ github.run_id }}
          path: |
            web-gui/playwright-report/
            web-gui/test-results/
            accessibility-report-${{ matrix.page }}.md
          retention-days: 30

  axe-cli-accessibility-tests:
    name: Axe-CLI Accessibility Tests
    runs-on: ubuntu-latest
    needs: setup-accessibility-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd web-gui-node && npm install || true
          npm install -g @axe-core/cli

      - name: Start test server
        run: |
          cd web-gui-node
          npm start &
          echo $! > ../server.pid
          sleep 15

      - name: Run Axe-CLI tests
        run: |
          echo "# Axe-CLI Accessibility Report" > axe-cli-report.md
          echo "" >> axe-cli-report.md
          echo "## WCAG ${{ env.COMPLIANCE_LEVEL }} Compliance Test" >> axe-cli-report.md
          echo "" >> axe-cli-report.md

          for page in $(echo '${{ needs.setup-accessibility-environment.outputs.test-pages }}' | jq -r '.[]'); do
            echo "Testing page: $page"
            echo "### Page: $page" >> axe-cli-report.md
            
            axe http://localhost:3000$page \
              --tags wcag2${{ env.COMPLIANCE_LEVEL | tr '[:upper:]' '[:lower:]' }},wcag21aa \
              --reporter json \
              --output axe-results-$(echo $page | tr '/' '-').json || true
            
            # Extract summary
            if [ -f "axe-results-$(echo $page | tr '/' '-').json" ]; then
              violations=$(jq '.violations | length' "axe-results-$(echo $page | tr '/' '-').json")
              echo "- Violations found: $violations" >> axe-cli-report.md
            else
              echo "- Test failed or no results" >> axe-cli-report.md
            fi
            echo "" >> axe-cli-report.md
          done

      - name: Stop test server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          pkill -f "npm start" || true

      - name: Upload Axe-CLI results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: axe-cli-results
          path: |
            axe-cli-report.md
            axe-results-*.json
          retention-days: 30

  lighthouse-accessibility-audit:
    name: Lighthouse Accessibility Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd web-gui-node && npm install || true
          npm install -g lighthouse

      - name: Start test server
        run: |
          cd web-gui-node
          npm start &
          echo $! > ../server.pid
          sleep 15

      - name: Run Lighthouse accessibility audit
        run: |
          echo "# Lighthouse Accessibility Audit Report" > lighthouse-a11y-report.md
          echo "" >> lighthouse-a11y-report.md
          echo "## Accessibility Score Analysis" >> lighthouse-a11y-report.md
          echo "" >> lighthouse-a11y-report.md

          lighthouse http://localhost:3000 \
            --only-categories=accessibility \
            --output json --output html \
            --output-path lighthouse-a11y-results \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage"

          # Extract accessibility score
          A11Y_SCORE=$(cat lighthouse-a11y-results.report.json | jq '.categories.accessibility.score * 100')
          echo "Accessibility Score: $A11Y_SCORE/100" >> lighthouse-a11y-report.md
          
          # Extract failed audits
          echo "" >> lighthouse-a11y-report.md
          echo "## Failed Accessibility Audits:" >> lighthouse-a11y-report.md
          cat lighthouse-a11y-results.report.json | jq -r '.categories.accessibility.auditRefs[] | select(.result.score != 1) | "- " + .result.title' >> lighthouse-a11y-report.md || echo "No failed audits found" >> lighthouse-a11y-report.md

      - name: Stop test server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          pkill -f "npm start" || true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-accessibility-results
          path: |
            lighthouse-a11y-report.md
            lighthouse-a11y-results.report.json
            lighthouse-a11y-results.report.html
          retention-days: 30

  accessibility-summary:
    name: Accessibility Testing Summary
    runs-on: ubuntu-latest
    needs: [playwright-accessibility-tests, axe-cli-accessibility-tests, lighthouse-accessibility-audit]
    if: always()
    steps:
      - name: Download all accessibility test results
        uses: actions/download-artifact@v4
        with:
          path: accessibility-results

      - name: Generate comprehensive accessibility summary
        run: |
          echo "# 🌍 Enhanced Accessibility Testing Summary" > accessibility-summary.md
          echo "" >> accessibility-summary.md
          echo "## Test Configuration:" >> accessibility-summary.md
          echo "- Test Scope: ${{ env.TEST_SCOPE }}" >> accessibility-summary.md
          echo "- WCAG Compliance Level: ${{ env.COMPLIANCE_LEVEL }}" >> accessibility-summary.md
          echo "- Date: $(date)" >> accessibility-summary.md
          echo "" >> accessibility-summary.md
          echo "## Test Results:" >> accessibility-summary.md
          echo "- Playwright Tests: ${{ needs.playwright-accessibility-tests.result }}" >> accessibility-summary.md
          echo "- Axe-CLI Tests: ${{ needs.axe-cli-accessibility-tests.result }}" >> accessibility-summary.md
          echo "- Lighthouse Audit: ${{ needs.lighthouse-accessibility-audit.result }}" >> accessibility-summary.md
          echo "" >> accessibility-summary.md
          echo "## Accessibility Coverage:" >> accessibility-summary.md
          echo "- ✅ WCAG ${{ env.COMPLIANCE_LEVEL }} compliance testing" >> accessibility-summary.md
          echo "- ✅ Color contrast validation" >> accessibility-summary.md
          echo "- ✅ Keyboard navigation testing" >> accessibility-summary.md
          echo "- ✅ Screen reader compatibility" >> accessibility-summary.md
          echo "- ✅ Form accessibility validation" >> accessibility-summary.md
          echo "- ✅ Image alt text verification" >> accessibility-summary.md
          echo "- ✅ ARIA landmarks and roles" >> accessibility-summary.md
          echo "- ✅ Heading structure validation" >> accessibility-summary.md
          echo "" >> accessibility-summary.md
          echo "## Generated Reports:" >> accessibility-summary.md
          find accessibility-results -name "*.md" -o -name "*.html" -o -name "*.json" | head -20 >> accessibility-summary.md
          echo "" >> accessibility-summary.md
          echo "## Recommendations:" >> accessibility-summary.md
          echo "- Implement automated accessibility testing in CI/CD pipeline" >> accessibility-summary.md
          echo "- Regular manual testing with screen readers" >> accessibility-summary.md
          echo "- User testing with people with disabilities" >> accessibility-summary.md
          echo "- Accessibility training for development team" >> accessibility-summary.md
          echo "- Establish accessibility design guidelines" >> accessibility-summary.md

      - name: Upload accessibility summary
        uses: actions/upload-artifact@v4
        with:
          name: enhanced-accessibility-summary
          path: accessibility-summary.md
          retention-days: 30

      - name: Comment on PR with enhanced accessibility results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let summary = `## ♿ Enhanced Accessibility Test Results\n\n`;
            summary += `### Test Configuration:\n`;
            summary += `- **Scope:** ${{ env.TEST_SCOPE }}\n`;
            summary += `- **WCAG Level:** ${{ env.COMPLIANCE_LEVEL }}\n`;
            summary += `- **Tools Used:** Playwright + Axe, Axe-CLI, Lighthouse\n\n`;
            
            summary += `### Test Results:\n`;
            summary += `- **Playwright Tests:** ${{ needs.playwright-accessibility-tests.result }}\n`;
            summary += `- **Axe-CLI Tests:** ${{ needs.axe-cli-accessibility-tests.result }}\n`;
            summary += `- **Lighthouse Audit:** ${{ needs.lighthouse-accessibility-audit.result }}\n\n`;
            
            summary += `### Coverage Areas:\n`;
            summary += `- ✅ WCAG ${{ env.COMPLIANCE_LEVEL }} compliance\n`;
            summary += `- ✅ Color contrast validation\n`;
            summary += `- ✅ Keyboard navigation\n`;
            summary += `- ✅ Screen reader compatibility\n`;
            summary += `- ✅ Form accessibility\n`;
            summary += `- ✅ ARIA implementation\n\n`;
            
            summary += `**📊 Detailed reports are available in the workflow artifacts.**`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
        continue-on-error: true
