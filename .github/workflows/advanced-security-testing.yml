name: Advanced Security Testing

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: write

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  sast-enhanced:
    name: Enhanced SAST Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python security tools
        run: |
          pip install bandit[toml] safety semgrep pylint
          pip install -r requirements.txt || true
          pip install -r requirements-test.txt || true

      - name: Run enhanced Bandit scan
        run: |
          bandit -r . -f json -o bandit-enhanced.json \
            --exclude=./node_modules,./ComfyUI/models,./web-gui/node_modules,./web-gui-node/node_modules,./tests \
            --severity-level medium \
            --confidence-level medium
        continue-on-error: true

      - name: Run Safety dependency scan
        run: |
          safety check --json --output safety-enhanced.json --full-report
        continue-on-error: true

      - name: Run Semgrep security rules
        run: |
          semgrep --config=auto --json --output=semgrep-enhanced.json .
        continue-on-error: true

      - name: Run Pylint security checks
        run: |
          pylint --load-plugins=pylint.extensions.broad_try_clause \
            --load-plugins=pylint.extensions.bad_builtin \
            --disable=all \
            --enable=security-related,dangerous-default-value,eval-used \
            --output-format=json > pylint-security.json . || true
        continue-on-error: true

      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-enhanced-results
          path: |
            bandit-enhanced.json
            safety-enhanced.json
            semgrep-enhanced.json
            pylint-security.json
          retention-days: 30

  dast-testing:
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt || true
          cd web-gui-node && npm install || true

      - name: Start application services
        run: |
          cd web-gui-node
          npm start &
          echo $! > ../server.pid
          sleep 10
        continue-on-error: true

      - name: Wait for services to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "Service is ready"
              break
            fi
            echo "Waiting for service... ($i/30)"
            sleep 2
          done

      - name: Run OWASP ZAP DAST scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 10 -T 5'
        continue-on-error: true

      - name: Run Nuclei vulnerability scanner
        run: |
          docker run --rm --network=host \
            -v $(pwd):/tmp/nuclei \
            projectdiscovery/nuclei:latest \
            -target http://localhost:3000 \
            -o /tmp/nuclei/nuclei-results.txt \
            -severity medium,high,critical
        continue-on-error: true

      - name: Stop services
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          pkill -f "npm start" || true

      - name: Upload DAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dast-results
          path: |
            report_html.html
            report_md.md
            report_json.json
            nuclei-results.txt
          retention-days: 30

  dependency-security:
    name: Enhanced Dependency Security Scanning
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scanner: ['trivy', 'grype', 'osv-scanner']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: Run Grype vulnerability scanner
        if: matrix.scanner == 'grype'
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype dir:. -o json > grype-results.json
        continue-on-error: true

      - name: Run OSV Scanner
        if: matrix.scanner == 'osv-scanner'
        run: |
          curl -L https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          ./osv-scanner -r . --format json > osv-results.json || true
        continue-on-error: true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-${{ matrix.scanner }}
          path: |
            trivy-fs-results.sarif
            grype-results.json
            osv-results.json
          retention-days: 30

  secret-scanning:
    name: Enhanced Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secret scanner
        run: |
          docker run --rm -v $(pwd):/pwd trufflesecurity/trufflehog:latest \
            filesystem /pwd --json > trufflehog-results.json || true
        continue-on-error: true

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline || true
          detect-secrets audit .secrets.baseline --report > detect-secrets-report.json || true
        continue-on-error: true

      - name: Upload secret scanning results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scanning-results
          path: |
            trufflehog-results.json
            detect-secrets-report.json
            .secrets.baseline
          retention-days: 30

  security-summary:
    name: Security Testing Summary
    runs-on: ubuntu-latest
    needs: [sast-enhanced, dast-testing, dependency-security, secret-scanning]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-results

      - name: Generate security summary
        run: |
          echo "# Security Testing Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Test Results:" >> security-summary.md
          echo "- SAST Enhanced: ${{ needs.sast-enhanced.result }}" >> security-summary.md
          echo "- DAST Testing: ${{ needs.dast-testing.result }}" >> security-summary.md
          echo "- Dependency Security: ${{ needs.dependency-security.result }}" >> security-summary.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Artifacts Generated:" >> security-summary.md
          find security-results -name "*.json" -o -name "*.sarif" -o -name "*.html" | head -20 >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-testing-summary
          path: security-summary.md
          retention-days: 30