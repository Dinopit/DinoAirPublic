name: Blue-Green Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (blue or green)'
        required: true
        default: 'blue'
        type: choice
        options:
        - blue
        - green
      auto_switch:
        description: 'Automatically switch traffic after successful deployment'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  actions: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web-gui

jobs:
  # Build and Test (reuse from existing CI/CD)
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web-gui/package-lock.json

      - name: Install dependencies
        working-directory: ./web-gui
        run: npm ci

      - name: Run tests
        working-directory: ./web-gui
        run: npm run test:coverage

      - name: Install Playwright browsers
        working-directory: ./web-gui
        run: npx playwright install --with-deps

      - name: Run accessibility tests
        working-directory: ./web-gui
        run: npm run test:accessibility

      - name: Setup Node.js for backend
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web-gui-node/package-lock.json

      - name: Install backend dependencies
        working-directory: ./web-gui-node
        run: npm ci

      - name: Run backend tests
        working-directory: ./web-gui-node
        run: npm test

      - name: Run load tests
        working-directory: ./web-gui-node
        run: npm run load-test:quick

      - name: Build application
        working-directory: ./web-gui
        run: npm run build:production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./web-gui
          file: ./web-gui/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Determine deployment strategy
  determine-strategy:
    name: Determine Deployment Strategy
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      target-environment: ${{ steps.strategy.outputs.target-environment }}
      current-environment: ${{ steps.strategy.outputs.current-environment }}
      should-switch: ${{ steps.strategy.outputs.should-switch }}
    steps:
      - name: Determine deployment strategy
        id: strategy
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual deployment
            TARGET_ENV="${{ github.event.inputs.environment }}"
            SHOULD_SWITCH="${{ github.event.inputs.auto_switch }}"
          else
            # Automatic deployment - determine environment based on current state
            # For now, default to blue (in real scenario, query current active environment)
            TARGET_ENV="green"
            SHOULD_SWITCH="true"
          fi
          
          echo "target-environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "current-environment=blue" >> $GITHUB_OUTPUT  # Would be determined dynamically
          echo "should-switch=$SHOULD_SWITCH" >> $GITHUB_OUTPUT
          
          echo "Target environment: $TARGET_ENV"
          echo "Should auto-switch: $SHOULD_SWITCH"

  # Deploy to target environment
  deploy:
    name: Deploy to ${{ needs.determine-strategy.outputs.target-environment }} Environment
    runs-on: ubuntu-latest
    needs: [build-and-test, determine-strategy]
    environment:
      name: ${{ needs.determine-strategy.outputs.target-environment }}
      url: ${{ steps.deploy.outputs.environment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment tools
        run: |
          # Install required tools for deployment
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Deploy to ${{ needs.determine-strategy.outputs.target-environment }}
        id: deploy
        env:
          TARGET_ENV: ${{ needs.determine-strategy.outputs.target-environment }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.image-tag }}
        run: |
          # In a real deployment, this would:
          # 1. SSH to deployment server
          # 2. Pull new image
          # 3. Update environment configuration
          # 4. Deploy to target environment
          # 5. Run health checks
          
          echo "üöÄ Deploying to $TARGET_ENV environment..."
          echo "üì¶ Using image: $IMAGE_TAG"
          
          # Simulate deployment process
          echo "‚úÖ Environment deployed successfully"
          
          # Set output for environment URL
          if [[ "$TARGET_ENV" == "blue" ]]; then
            echo "environment-url=http://blue.dinoair.example.com" >> $GITHUB_OUTPUT
          else
            echo "environment-url=http://green.dinoair.example.com" >> $GITHUB_OUTPUT
          fi

      - name: Wait for deployment to be ready
        env:
          TARGET_ENV: ${{ needs.determine-strategy.outputs.target-environment }}
        run: |
          echo "‚è≥ Waiting for $TARGET_ENV environment to be ready..."
          
          # In real deployment, check readiness endpoint
          # for i in {1..30}; do
          #   if curl -f "http://$TARGET_ENV.dinoair.example.com/api/ready"; then
          #     echo "‚úÖ Environment is ready!"
          #     break
          #   fi
          #   echo "Attempt $i/30: Not ready yet, waiting..."
          #   sleep 10
          # done
          
          # Simulate readiness check
          sleep 5
          echo "‚úÖ Environment is ready!"

      - name: Run deployment validation
        env:
          TARGET_ENV: ${{ needs.determine-strategy.outputs.target-environment }}
        run: |
          echo "üîç Running deployment validation..."
          
          # In real deployment, run comprehensive tests:
          # - Health checks
          # - Smoke tests
          # - Integration tests
          # - Performance tests
          
          echo "‚úÖ All validation tests passed!"

      - name: Configure APM monitoring
        env:
          TARGET_ENV: ${{ needs.determine-strategy.outputs.target-environment }}
        run: |
          echo "üìä Configuring APM monitoring for $TARGET_ENV environment..."
          
          # In real deployment:
          # - Configure OpenTelemetry endpoints
          # - Set up monitoring dashboards
          # - Configure alerting rules
          # - Verify APM data collection
          
          echo "‚úÖ APM monitoring configured!"

      - name: Verify APM endpoints
        env:
          TARGET_ENV: ${{ needs.determine-strategy.outputs.target-environment }}
        run: |
          echo "üîç Verifying APM endpoints..."
          
          # In real deployment, verify:
          # - /api/performance endpoint responds
          # - /api/health includes performance metrics
          # - OpenTelemetry traces are being collected
          
          echo "‚úÖ APM endpoints verified!"

  # Switch traffic (conditional)
  switch-traffic:
    name: Switch Traffic to ${{ needs.determine-strategy.outputs.target-environment }}
    runs-on: ubuntu-latest
    needs: [deploy, determine-strategy]
    if: needs.determine-strategy.outputs.should-switch == 'true'
    environment:
      name: production
      url: https://dinoair.example.com
    steps:
      - name: Switch traffic
        env:
          TARGET_ENV: ${{ needs.determine-strategy.outputs.target-environment }}
          CURRENT_ENV: ${{ needs.determine-strategy.outputs.current-environment }}
        run: |
          echo "üîÑ Switching traffic from $CURRENT_ENV to $TARGET_ENV..."
          
          # In real deployment:
          # 1. Update load balancer configuration
          # 2. Gradually shift traffic
          # 3. Monitor for errors
          # 4. Complete switch or rollback
          
          echo "‚úÖ Traffic successfully switched to $TARGET_ENV!"

      - name: Post-switch validation
        env:
          TARGET_ENV: ${{ needs.determine-strategy.outputs.target-environment }}
        run: |
          echo "üîç Validating production traffic on $TARGET_ENV..."
          
          # Monitor for issues after traffic switch
          # Check error rates, response times, etc.
          
          echo "‚úÖ Production validation completed!"

      - name: Cleanup old environment
        env:
          OLD_ENV: ${{ needs.determine-strategy.outputs.current-environment }}
        run: |
          echo "üßπ Cleaning up $OLD_ENV environment..."
          
          # Keep old environment running for quick rollback
          # Could scale down resources but keep available
          
          echo "‚úÖ Old environment cleaned up (kept for rollback)"

  # Rollback job (manual trigger only)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    needs: [switch-traffic, determine-strategy]
    environment:
      name: production
      url: https://dinoair.example.com
    steps:
      - name: Rollback traffic
        env:
          ROLLBACK_ENV: ${{ needs.determine-strategy.outputs.current-environment }}
        run: |
          echo "üîô Rolling back to $ROLLBACK_ENV environment..."
          
          # Immediate rollback to previous environment
          
          echo "‚úÖ Rollback completed!"

      - name: Send notification
        run: |
          echo "üì¢ Deployment failed and was rolled back"
          # Send notifications to team
