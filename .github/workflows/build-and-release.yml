name: Build and Release DinoAir Installers

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  actions: write
  packages: write

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'installer/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Get version
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=v$(date +%Y%m%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Install installer dependencies
        run: |
          cd installer
          npm ci

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run tests
        run: |
          cd installer
          npm test

      - name: Run security scan
        run: |
          cd installer
          npm audit --audit-level moderate

      - name: Build Windows installer
        env:
          WINDOWS_CERTIFICATE_FILE: ${{ secrets.WINDOWS_CERTIFICATE_FILE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          cd installer
          npm run build:win

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: installer/dist/*.exe
          retention-days: 30

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'installer/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install installer dependencies
        run: |
          cd installer
          npm ci

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run tests
        run: |
          cd installer
          npm test

      - name: Run security scan
        run: |
          cd installer
          npm audit --audit-level moderate

      - name: Import signing certificate
        if: env.APPLE_CERTIFICATE_P12 != ''
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "$APPLE_CERTIFICATE_P12" | base64 --decode > certificate.p12
          security create-keychain -p "$APPLE_CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$APPLE_CERTIFICATE_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$APPLE_CERTIFICATE_PASSWORD" build.keychain

      - name: Build macOS installer
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          cd installer
          npm run build:mac

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: installer/dist/*.dmg
          retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'installer/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3 libatk-bridge2.0-0 libgtkextra-dev libxss1 libgconf-2-4

      - name: Install installer dependencies
        run: |
          cd installer
          npm ci

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run tests
        run: |
          cd installer
          npm test

      - name: Run security scan
        run: |
          cd installer
          npm audit --audit-level moderate

      - name: Build Linux installers
        run: |
          cd installer
          npm run build:linux

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: |
            installer/dist/*.AppImage
            installer/dist/*.deb
            installer/dist/*.rpm
          retention-days: 30

  build-cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install CLI dependencies
        run: |
          cd installer
          npm ci

      - name: Build CLI package
        run: |
          cd installer
          # Create CLI-only package.json
          cp package-cli.json package-cli-build.json
          npm pack --pack-destination=dist

      - name: Upload CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-package
          path: installer/dist/*.tgz
          retention-days: 30

  create-release:
    needs: [build-windows, build-macos, build-linux, build-cli]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-windows.outputs.version }}
          release_name: DinoAir ${{ needs.build-windows.outputs.version }}
          body: |
            ## DinoAir Installation Packages

            ### Windows
            - `DinoAir-Setup-${{ needs.build-windows.outputs.version }}.exe` - Windows installer (signed)

            ### macOS  
            - `DinoAir-${{ needs.build-windows.outputs.version }}.dmg` - macOS disk image (signed and notarized)

            ### Linux
            - `DinoAir-${{ needs.build-windows.outputs.version }}.AppImage` - Universal Linux AppImage
            - `dinoair_${{ needs.build-windows.outputs.version }}_amd64.deb` - Debian/Ubuntu package
            - `dinoair-${{ needs.build-windows.outputs.version }}.x86_64.rpm` - RedHat/CentOS package

            ### CLI
            - `dinoair-installer-cli-${{ needs.build-windows.outputs.version }}.tgz` - NPM package for CLI installation

            ## Installation Instructions

            ### Quick Install (Recommended)
            ```bash
            # CLI installer (requires Node.js)
            npm install -g dinoair-installer-cli@${{ needs.build-windows.outputs.version }}
            dinoair-install
            ```

            ### Platform-Specific Installers
            Download the appropriate installer for your platform and follow the installation wizard.

            ## What's New
            See [CHANGELOG.md](https://github.com/Dinopit/DinoAirPublic/blob/main/CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: ${{ contains(needs.build-windows.outputs.version, 'alpha') || contains(needs.build-windows.outputs.version, 'beta') || contains(needs.build-windows.outputs.version, 'rc') }}

      - name: Upload Windows installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-installer/DinoAir Setup.exe
          asset_name: DinoAir-Setup-${{ needs.build-windows.outputs.version }}.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-installer/DinoAir.dmg
          asset_name: DinoAir-${{ needs.build-windows.outputs.version }}.dmg
          asset_content_type: application/octet-stream

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux-installer/DinoAir.AppImage
          asset_name: DinoAir-${{ needs.build-windows.outputs.version }}.AppImage
          asset_content_type: application/octet-stream
